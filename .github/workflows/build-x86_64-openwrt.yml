#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build x86_64 510

on:
  repository_dispatch:
  workflow_dispatch:
#  schedule:
#    - cron: 0 19 * * SAT
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  WORKDIR: /home/ubuntu/actions-runner/_work/Openwrt_Tsubasa_Mod/Openwrt_Tsubasa_Mod
  CONFIG_FILE: config/x86/x86_64-openwrt-target.config
  DIY_SH: scripts/project-openwrt.sh
  #WEBROOT: ~/openwrt
  RUNNER: project-x86_64

jobs:
  Toolchain:
    runs-on: project-x86_64

    outputs:
      TOOLCHAIN_STATUS: ${{ steps.toolchain.outputs.TOOLCHAIN_STATUS }}

    steps:
      - name: Umount Missing Loop Devices
        id: umount
        run: |
          sudo umount /dev/loop*p1 || true
          sudo losetup -D || true
          lsblk

      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo $GITHUB_WORKSPACE
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo umount /dev/loop*p1 || true
          sudo losetup -D || true
          rm -rf openwrt.img
          fallocate -l 60G openwrt.img
          echo 'type=83' | sfdisk openwrt.img
          export LOOP="$(sudo losetup -f -P --show openwrt.img)"
          echo "LOOP=$LOOP" >> $GITHUB_ENV
          echo "::set-output name=LOOP::$(echo $LOOP)"
          sudo mkfs.ext4 ${LOOP}p1
          mkdir -p openwrt
          sudo mount ${LOOP}p1 openwrt
          lsblk
          sudo chown -R ubuntu:ubuntu openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH
          mv lede/* openwrt
          mv lede/.git* openwrt

      - name: Update Feeds
        id: update
        run: |
          cd $OPENWRTROOT
          mkdir customfeeds
          git clone --depth=1 https://github.com/coolsnowwolf/packages customfeeds/packages
          git clone --depth=1 https://github.com/coolsnowwolf/luci customfeeds/luci
          chmod +x ../scripts/*.sh
          ../scripts/hook-feeds.sh

      - name: Install Feeds
        id: install
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRTROOT/files
          cd $OPENWRTROOT
          ../$DIY_SH

      - name: Download All Packages
        id: download
        run: |
          cd $OPENWRTROOT
          rm -rf dl
          mkdir -p ~/cache/lean/dl
          cp -r ~/cache/lean/dl .
          echo "CONFIG_ALL=y" >> .config
          make defconfig
          make download -j1 IGNORE_ERRORS=1
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          echo "::set-output name=TOOLCHAIN_STATUS::success"

  Compile-Tools:
    needs: [Toolchain]
    runs-on: project-x86_64

    outputs:
      COMPILETOOLS_STATUS: ${{ steps.compiletools.outputs.COMPILETOOLS_STATUS }}          

    steps:
      - name: Compile-Tools
        id: tools
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          rm -f $OPENWRTROOT/.config
          cp ../config/x86/x86_64-openwrt-target.config $OPENWRTROOT/.config
          cat ../config/firmware-extra.config >> $OPENWRTROOT/.config
          cat ../config/base-wireless-support.config >> $OPENWRTROOT/.config
          make defconfig
          echo -e "$(nproc) threads compile"
          make tools/install -j1 BUILD_LOG=1 || make tools/install -j1 V=s
          echo "::set-output name=COMPILETOOLS_STATUS::success"

  Compile-Toolchain:
    needs: [Compile-Tools]
    runs-on: project-x86_64

    outputs:
      COMPILETOOLCHAIN_STATUS: ${{ steps.compiletoolchain.outputs.COMPILETOOLCHAIN_STATUS }}  

    steps:
      - name: Compile-Toolchain
        id: toolchain
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          cd $OPENWRTROOT
          echo -e "$(nproc) threads compile"
          make toolchain/compile -j2 BUILD_LOG=1 || make toolchain/compile -j1 V=s
          echo "::set-output name=COMPILETOOLCHAIN_STATUS::success"

  Umount-Disk-Image:
    needs: [Compile-Toolchain]
    runs-on: project-x86_64

    outputs:
      TOOLCHAIN_STATUS: ${{ steps.toolchain.outputs.TOOLCHAIN_STATUS }}  

    steps:
      - name: Umount-Disk-Image
        id: prepare
        if: always()
        run: |
          sync
          sudo umount ${LOOP}p1 || true
          sudo losetup -d $LOOP || true
          lsblk

  Firmware:
    if: needs.Toolchain.outputs.TOOLCHAIN_STATUS == 'success'
    needs: [Umount-Disk-Image]
    runs-on: project-x86_64

    outputs:
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
      - name: Initialization Environment
        id: init
        run: |
          export LOOP="$(sudo losetup -f -P --show openwrt.img)"
          echo "LOOP=$LOOP" >> $GITHUB_ENV
          echo "::set-output name=LOOP::$(echo $LOOP)"
          mkdir -p openwrt
          sudo mount ${LOOP}p1 openwrt
          lsblk
          sudo chown -R ubuntu:ubuntu openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Compile Firmware Packages
        id: compile
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) threads compile"
          echo 'CONFIG_MMC_SDHCI_ACPI=y' >> target/linux/x86/64/config-5.4
          make target/compile -j2 'IGNORE_ERRORS=n m' BUILD_LOG=1 || make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j2 'IGNORE_ERRORS=n m' BUILD_LOG=1 || make package/compile -j1 V=s
          make package/index
          cd $OPENWRTROOT/bin/packages/*
          PLATFORM=$(basename `pwd`)
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "::set-output name=TARGET::$(echo $TARGET)"
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=FIRMWARE::$(echo $PWD)"
          echo "::set-output name=COMPILE_STATUS::success"

      - name: Generate Firmware
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
          cd data/opkg
          sed -i "s/subtarget/$SUBTARGET/g" distfeeds.conf
          sed -i "s/target\//$TARGET\//g" distfeeds.conf
          sed -i "s/platform/$PLATFORM/g" distfeeds.conf
          cd $OPENWRTROOT
          mkdir -p files/etc/opkg
          cp ../data/opkg/distfeeds.conf files/etc/opkg/distfeeds.conf
          mkdir -p files/www/openwrt
          cp -r bin/targets files/www/openwrt
          mkdir -p files/etc/uci-defaults/
          cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          make package/install || make package/install -j1 V=s
          make target/install || make target/install -j1 V=s
          make checksum
          mkdir -p $OPENWRTROOT/output/bin/targets/$TARGET
          cp -r $FIRMWARE $OPENWRTROOT/output/bin/targets/$TARGET
          echo "::set-output name=GENERATE_STATUS::success"

      - name: Umount Disk Image
        if: always()
        id: prepare
        run: |
          sync
          sudo umount ${LOOP}p1 || true
          sudo losetup -d $LOOP || true
          lsblk

  Extra-Packages:
    if: needs.Firmware.outputs.GENERATE_STATUS == 'success'
    needs: [Firmware]
    runs-on: project-x86_64

    outputs:
      COMPILE_STATUS: ${{ steps.compile.outputs.COMPILE_STATUS }}

    steps:
      - name: Restore Variables
        id: restore
        run: |
          echo "PLATFORM=$(echo '${{needs.Firmware.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Firmware.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Firmware.outputs.SUBTARGET}}')" >> $GITHUB_ENV

      - name: Initialization Environment
        id: init
        run: |
          export LOOP="$(sudo losetup -f -P --show openwrt.img)"
          echo "LOOP=$LOOP" >> $GITHUB_ENV
          echo "::set-output name=LOOP::$(echo $LOOP)"
          mkdir -p openwrt
          sudo mount ${LOOP}p1 openwrt
          lsblk
          sudo chown -R ubuntu:ubuntu openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Compile Extra Packages
        id: compile
        env:
          DEBIAN_FRONTEND: noninteractive
        timeout-minutes: 9999
        run: |
          cd $OPENWRTROOT
          rm -f .config*
          cp ../$CONFIG_FILE ./.config
          cat ../config/packages-extra.config >> $OPENWRTROOT/.config
          make defconfig
          make diffconfig
          make target/clean
          make package/libs/mbedtls/clean
          make target/compile -j1 'IGNORE_ERRORS=n m' BUILD_LOG=1 || make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j1 BUILD_LOG=1 IGNORE_ERRORS="y m n" || make package/compile -j1 V=s IGNORE_ERRORS="y m n"
          make package/index
          mkdir -p $OPENWRTROOT/output/bin/packages
          cp -r bin/packages/$PLATFORM $OPENWRTROOT/output/bin/packages
          echo "::set-output name=COMPILE_STATUS::success"

      - name: Compress Bin Folder
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: compress
        run: |
          cd $OPENWRTROOT/output
          zip -q -s 500m -r bin-archive.zip bin
          rm -rf bin

      - name: Upload Bin Archive
        id: upload
        uses: actions/upload-artifact@main
        with:
          name: Openwrt_Compile
          path: openwrt/output

      - name: Umount Disk Image
        if: always()
        id: prepare
        run: |
          sync
          sudo umount ${LOOP}p1 || true
          sudo losetup -d $LOOP || true
          lsblk

#  Upload:
#    if: needs.Extra-Packages.outputs.COMPILE_STATUS == 'success'
#    needs: [Extra-Packages, Firmware]
#    runs-on: ubuntu-18.04
#
#    steps:
#      - name: Restore Variables
#        id: restore
#        run: |
#          echo "PLATFORM=$(echo '${{needs.Firmware.outputs.PLATFORM}}')" >> $GITHUB_ENV
#          echo "TARGET=$(echo '${{needs.Firmware.outputs.TARGET}}')" >> $GITHUB_ENV
#          echo "SUBTARGET=$(echo '${{needs.Firmware.outputs.SUBTARGET}}')" >> $GITHUB_ENV
#
#      - name: Download Bin Archive
#        id: download
#        uses: actions/download-artifact@v2
#        with:
#          name: Bin-Archive
#          path: openwrt
#
#      - name: Decompress Bin Folder
#        id: decompress
#        run: |
#          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#          cd openwrt
#          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
#          zip -q -s 0 bin-archive.zip --out bin.zip
#          unzip bin.zip
#          cd bin/targets/$TARGET/$SUBTARGET
#          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

